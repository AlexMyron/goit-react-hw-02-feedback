{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","wrapper","Statistics","good","neutral","bad","totalFeedback","positivePercentage","total","spanWrapper","output","isNaN","FeedbackOptions","onLeaveFeedback","boxWrapper","btn","type","onClick","prototypes","onAddFeedback","PropTypes","func","Notification","message","App","state","addFeedback","value","setState","prevState","countTotalFeedback","Object","values","reduce","acc","el","countPositiveFeedbackPercentage","totalFeeds","res","Math","round","this","isAnyFeedbacks","Boolean","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae2e50fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanWrapper\":\"Statistics_spanWrapper__1umVp\",\"output\":\"Statistics_output__2-k6q\",\"total\":\"Statistics_total__332a-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxWrapper\":\"FeedbackOptions_boxWrapper__2h-V0\",\"btn\":\"FeedbackOptions_btn__1RxMb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Section_wrapper__3LJta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__3Oswq\"};","import PropTypes from \"prop-types\";\nimport s from \"./Section.module.css\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.wrapper}>\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\nimport s from \"./Statistics.module.css\";\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  totalFeedback,\n  positivePercentage,\n}) => {\n  const total = totalFeedback();\n\n  return (\n    <div className=\"box\">\n      <div className={s.spanWrapper}>\n        <span className={s.output}>good: {good}</span>\n        <span className={s.output}>neutral: {neutral}</span>\n        <span className={s.output}>bad: {bad}</span>\n        <span className={s.total}>total: {total}</span>\n        <span className={s.total}>\n          positive feedbacks:{\" \"}\n          {isNaN(positivePercentage()) ? \"0\" : positivePercentage()}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  totalFeedback: PropTypes.func,\n  persentage: PropTypes.func,\n};\nexport default Statistics;\n","import PropTypes from \"prop-types\";\nimport s from \"./FeedbackOptions.module.css\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  return (\n    <div className={s.boxWrapper}>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(\"good\")}\n      >\n        good\n      </button>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(\"neutral\")}\n      >\n        neutral\n      </button>\n      <button\n        className={s.btn}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(\"bad\")}\n      >\n        bad\n      </button>\n    </div>\n  );\n};\n\nFeedbackOptions.prototypes = {\n  onAddFeedback: PropTypes.func,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\nimport s from \"./Notification.module.css\";\n\nconst Notification = ({ message }) => {\n  return (\n    <div className={s.message}>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nNotification.propTypes = { message: PropTypes.string.isRequired };\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = value => {\n    this.setState(prevState => {\n      if (value === 'good') return { good: prevState.good + 1 };\n      if (value === 'neutral') return { neutral: prevState.neutral + 1 };\n      if (value === 'bad') return { bad: prevState.bad + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const stateValues = Object.values(this.state);\n    return stateValues.reduce((acc, el) => acc + el, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const totalFeeds = this.countTotalFeedback();\n    const goodFeeds = this.state.good;\n    const res = (goodFeeds * 100) / totalFeeds;\n    return Math.round(res);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const isAnyFeedbacks = Boolean(this.countTotalFeedback());\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave a feedback\">\n          <FeedbackOptions onLeaveFeedback={this.addFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          {isAnyFeedbacks && (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              totalFeedback={this.countTotalFeedback}\n              positivePercentage={this.countPositiveFeedbackPercentage}\n            />\n          )}\n        </Section>\n        {!isAnyFeedbacks && <Notification message=\"No feedback given..\" />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}